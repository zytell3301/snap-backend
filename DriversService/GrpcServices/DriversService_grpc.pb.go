// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package GrpcServices

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriversLocationReportClient is the client API for DriversLocationReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriversLocationReportClient interface {
	UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	Deactivate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
}

type driversLocationReportClient struct {
	cc grpc.ClientConnInterface
}

func NewDriversLocationReportClient(cc grpc.ClientConnInterface) DriversLocationReportClient {
	return &driversLocationReportClient{cc}
}

func (c *driversLocationReportClient) UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/GrpcServices.DriversLocationReport/UpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversLocationReportClient) Deactivate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/GrpcServices.DriversLocationReport/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriversLocationReportServer is the server API for DriversLocationReport service.
// All implementations must embed UnimplementedDriversLocationReportServer
// for forward compatibility
type DriversLocationReportServer interface {
	UpdateLocation(context.Context, *Location) (*wrappers.BoolValue, error)
	Deactivate(context.Context, *empty.Empty) (*wrappers.BoolValue, error)
	mustEmbedUnimplementedDriversLocationReportServer()
}

// UnimplementedDriversLocationReportServer must be embedded to have forward compatible implementations.
type UnimplementedDriversLocationReportServer struct {
}

func (UnimplementedDriversLocationReportServer) UpdateLocation(context.Context, *Location) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedDriversLocationReportServer) Deactivate(context.Context, *empty.Empty) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedDriversLocationReportServer) mustEmbedUnimplementedDriversLocationReportServer() {}

// UnsafeDriversLocationReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriversLocationReportServer will
// result in compilation errors.
type UnsafeDriversLocationReportServer interface {
	mustEmbedUnimplementedDriversLocationReportServer()
}

func RegisterDriversLocationReportServer(s grpc.ServiceRegistrar, srv DriversLocationReportServer) {
	s.RegisterService(&DriversLocationReport_ServiceDesc, srv)
}

func _DriversLocationReport_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversLocationReportServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcServices.DriversLocationReport/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversLocationReportServer).UpdateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriversLocationReport_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriversLocationReportServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcServices.DriversLocationReport/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriversLocationReportServer).Deactivate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DriversLocationReport_ServiceDesc is the grpc.ServiceDesc for DriversLocationReport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriversLocationReport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcServices.DriversLocationReport",
	HandlerType: (*DriversLocationReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLocation",
			Handler:    _DriversLocationReport_UpdateLocation_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _DriversLocationReport_Deactivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GrpcServices/DriversService.proto",
}
